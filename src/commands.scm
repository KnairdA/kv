(include "src/store.scm")
(include "src/utility.scm")

(define-record documentation arguments description)
(define-record command       name implementation documentation)

(define (perform-help arguments)
  (let ((printer (make-key-value-pretty-printer first-column-offset 30)))
    (print (format #f "~{~&~A~}"
                   (map (lambda (command)
                          (let ((documentation (command-documentation command)))
                            (printer (documentation-arguments   documentation)
                                     (documentation-description documentation))))
                        commands)))))

(define (perform-show arguments)
  (let ((count (length arguments)))
    (cond ((= 0 count) (print (stores->print        (read-all-stores #t))))
          ((= 1 count) (print                       (path->store (file-in-base (first arguments)))))
          ((= 2 count) (print (read-entry-returning (path->store (file-in-base (first arguments))) (second arguments) entry-value)))
          (else        (print "show: storage and key required at most")))))

(define (perform-all arguments)
  (let ((count (length arguments)))
    (cond ((= 0 count) (print (entries->pretty-print (merge-stores  (read-all-stores)))))
          ((= 1 count) (print (entries->pretty-print (store-content (path->store (file-in-base (first arguments)))))))
          ((= 2 count) (print (read-entry-returning                 (path->store (file-in-base (first arguments))) (second arguments) entry->pretty-print)))
          (else        (print "all: storage and key required at most")))))

(define (perform-write arguments)
  (if (>= (length arguments) 3)
    (update-store-using (path->store (file-in-base (first arguments)))
                        (write-entry (second arguments) (drop arguments 2)))
    (print "write: storage, key and value required")))

(define (perform-delete arguments)
  (if (= (length arguments) 2)
    (update-store-using (path->store (file-in-base (first arguments)))
                        (delete-entry (second arguments)))
    (print "delete: storage and key required")))

(define (perform-rename arguments)
  (if (= (length arguments) 3)
    (update-store-using (path->store (file-in-base (first arguments)))
                        (rename-entry (second arguments) (third arguments)))
    (print "rename: storage, old-key and new-key required")))
